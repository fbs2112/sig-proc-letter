%Volterra NLMS DFE

clear;
clc;
close all;

addpath(['..' filesep 'simParameters' filesep]);

load paramDFE_FF_FB.mat;


numberOfSymbols = 2^numberOfBits;

delayVector = 1:feedforwardLength+length(h);%adapFiltLength + 10;

e3 = cell(length(delayVector),1);
w3 = cell(length(delayVector),1);


%     count = zeros(maxIt,length(barGammaVector));
for delay = 1:length(delayVector)


        u = zeros(L+1,1);
        u(1) = 1;


        w2 = zeros(adapFiltLength,maxRuns,maxIt);
        for j = 1:maxIt
            j


            input = randi([0,3],maxRuns*2,1);
            pilot = qammod(input,4);

            pilot = pilot.*sqrt(signalPower/var(pilot));

%             xAux2 = filter(h,1,pilot); % linear case

%             xAux2(1:2,1) = pilot(1:2).^2; % nonlinear case
%             xAux2(3,1) = pilot(3).^2 + pilot(2)*pilot(1);
% 
%             for m = 4:length(pilot)
%                xAux2(m,1) = pilot(m).^2 + pilot(m-1)*pilot(m-2) + pilot(m-3);
%             end

%              for m = 1:length(pilot)
%                 xAux2(m,1) = pilot(m) + 0.2*(pilot(m)^2);
%              end
%                  xAux2 = filter(h,1,pilot);
%             xAux2 = exp(-pilot);

              xAux2 = filter(h,1,pilot);

              xAux2 = xAux2 + 0.2*(xAux2.^2) + 0.05*(xAux2.^3);
%                  xAux2 = xAux2.^2;
%               xAux2(1) = pilot(1);
%               for m = 2:length(pilot)
%                   xAux2(m,1) = pilot(m) + pilot(m-1);
%               end


%             xAux2(1,1) = pilot(1); % nonlinear case
% %             xAux2(3,1) = pilot(3).^2 + pilot(2)*pilot(1);
% 
%             for m = 2:length(pilot)
%                xAux2(m,1) = pilot(m) + pilot(m-1);
%             end

    %         xAux2 = exp(pilot.*conj(pilot));


            n = randn(maxRuns*2,1) + randn(maxRuns*2,1)*1i;
            powerSignal = xAux2'*xAux2./(maxRuns*2);
            powerNoiseAux = n'*n/(maxRuns*2);
            powerNoise = (powerSignal/SNRAux);
            n = n.*sqrt(powerNoise/powerNoiseAux);

            xAux = xAux2 + n;
% 
% 
%                 xTDL = (buffer(pilot,N,N-1,'nodelay'));

            w = zeros(adapFiltLength,maxRuns) + 1e-6;

%                 w = zeros(N,maxRuns);


            for k = (adapFiltLength + delayVector(delay) + L + 10):maxRuns

                x(:,k) = xAux(k:-1:k-feedforwardLength+1);

                yHat(:,k) = (pilot(-delayVector(delay) + k + 1 -1:-1:-delayVector(delay) + k + 1 - feedbackLength - 1 + 1));

                if volterraFFFlag

                    aux = zeros((feedforwardLength^2+feedforwardLength)/2,1);

                    for lIndex = 1:length(l1FF)
                        aux(lIndex,1) = x(l1FF(lIndex),k)*(x(l2FF(lIndex),k));
                    end
                    xConc = [x(:,k);aux];
                else
                    xConc = x(:,k);
                end


                if volterraFBFlag
                    aux = zeros((feedbackLength^2+feedbackLength)/2,1);
                    for lIndex = 1:length(l1FB)
                        aux(lIndex,1) = yHat(l1FB(lIndex),k)*(yHat(l2FB(lIndex),k));
                    end

                    yHatConc = [yHat(:,k);aux];
                else
                    yHatConc = yHat(:,k);
                end

                if ~volterraFFFlag && ~volterraFBFlag 
                    xConc = x(:,k);
                    yHatConc = yHat(:,k);
                end

                z = [xConc;yHatConc];

                d(k) = (pilot(-delayVector(delay) + k + 1));

                e(k) = d(k) - w(:,k)'*z;

                absoluteValueError = abs(e(k));
% 
                if absoluteValueError > barGamma
                    mu(k) = 1 - barGamma/absoluteValueError;
                    G(:,:,k) = diag(((1 - kappa*mu(k))/adapFiltLength) + (kappa*mu(k)*abs(w(:,k))/norm(w(:,k),1)));
                    w(:,k+1) = w(:,k) + mu(k)*G(:,:,k)*z*((z'*G(:,:,k)*z+gamma*eye(1))\eye(1))*conj(e(k));
                    count(k,index) = 1;
                else
                    mu(k) = 0;
                    w(:,k+1) = w(:,k);
                    G(:,:,k) = eye(adapFiltLength);
                end

            end
            w2(:,:,j) = conj(w(:,1:maxRuns));
            e2(:,j) = abs(e).^2;
        end

        meanCount(barGammaIndex) = mean(count);

%             count = zeros(maxIt,1);

        w3 = mean(w2,3);
        wFinal(barGammaIndex,delay,:,L+1) = w3(:,end);

        e3(barGammaIndex,delay,:,L+1) = mean(e2,2);


end

save(['.' filesep 'results' filesep 'testSM_PAPA_Volterra.mat'],'w3','e3','meanCount');

rmpath(['..' filesep 'simParameters' filesep]);

