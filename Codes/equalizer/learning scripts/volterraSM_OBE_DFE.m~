%Volterra NLMS DFE

clear;
clc;
close all;

load paramDFE_FF_FB.mat;


numberOfSymbols = 2^numberOfBits;

delayVector = 1:N+length(h);%adapFiltLength + 10;

for barGammaIndex = 1:length(barGammaVector)
    count = zeros(maxIt,1);

%     count = zeros(maxIt,length(barGammaVector));
    for delay = 1:length(delayVector)     

        w2 = zeros(adapFiltLength,maxRuns,maxIt);
        for index = 1:maxIt
            index

            d = zeros(globalLength,1);
            P = zeros(adapFiltLength,adapFiltLength,maxIt);
            P(:,:,adapFiltLength + delayVector(delay)) = eye(adapFiltLength)*1e-6;
            sigma = zeros(globalLength,1);
            sigma(adapFiltLength + delayVector(delay)) = 1;
            delta = zeros(globalLength,1);
            lambda = zeros(globalLength,1);
            G = zeros(globalLength,1);

            x = zeros(feedforwardLength,1);
            y = zeros(feedbackLength,1);

            input = randi([0,3],maxRuns*2,1);
            pilot = qammod(input,4);

            pilot = pilot.*sqrt(signalPower/var(pilot));

            xAux2 = filter(h,1,pilot);

            xAux2 = xAux2 + 0.2*(xAux2.^2);

            n = randn(maxRuns*2,1) + randn(maxRuns*2,1)*1i;
            powerSignal = xAux2'*xAux2./(maxRuns*2);
            powerNoiseAux = n'*n/(maxRuns*2);
            powerNoise = (powerSignal/SNRAux);
            n = n.*sqrt(powerNoise/powerNoiseAux);

            xAux = xAux2 + n;

            xFlip = flipud(buffer(xAux,N,N-1));

            theta = zeros(adapFiltLength,maxRuns);

            for k = (adapFiltLength + delayVector(delay) + L + 10):maxRuns

                x(:,k) = xAux(k:-1:k-feedforwardLength+1);

                yHat(:,k) = (pilot(-delayVector(delay) + k + 1 -1:-1:-delayVector(delay) + k + 1 - feedbackLength - 1 + 1));

                if volterraFFFlag

                    aux = zeros((feedforwardLength^2+feedforwardLength)/2,1);

                    for lIndex = 1:length(l1FF)
                        aux(lIndex,1) = x(l1FF(lIndex),k)*(x(l2FF(lIndex),k));
                    end
                    xConc = [x(:,k);aux];
                else
                    xConc = x(:,k);
                end


                if volterraFBFlag
                    aux = zeros((feedbackLength^2+feedbackLength)/2,1);
                    for lIndex = 1:length(l1FB)
                        aux(lIndex,1) = yHat(l1FB(lIndex),k)*(yHat(l2FB(lIndex),k));
                    end

                    yHatConc = [yHat(:,k);aux];
                else
                    yHatConc = yHat(:,k);
                end

                if ~volterraFFFlag && ~volterraFBFlag 
                    xConc = x(:,k);
                    yHatConc = yHat(:,k);
                end

                z = [xConc;yHatConc];

                d(k) = (pilot(-delayVector(delay) + k + 1));

                delta(k) = d(k) - theta(:,k).'*z;

                G(k) = z.'*P(:,:,k)*conj(z);

                if abs(delta(k)) > barGamma
                    lambda(k) = (1/G(k))*((abs(delta(k))/barGamma) - 1);

                    P(:,:,k+1) = P(:,:,k) - (lambda(k)*P(:,:,k)*conj(z)*z.'*P(:,:,k))/(1+lambda(k)*G(k));

                    theta(:,k+1) = theta(:,k) + lambda(k)*P(:,:,k+1)*conj(z)*delta(k);

                    sigma(k+1) = sigma(k) - (lambda(k)*delta(k)^2)/(1+lambda(k)*G(k)) + lambda(k)*delta(k)^2;

                    count(k,index) = 1;
                else
                    lambda(k) = 0;
                    P(:,:,k+1) = P(:,:,k);
                    theta(:,k+1) = theta(:,k);
                    sigma(k+1) = sigma(k);
                end


            end
                w2(:,:,index) = (theta(:,1:maxRuns));
                e2(:,index) = abs(delta).^2;
            end

            meanCount(barGammaIndex) = mean(count);
            
            w3 = mean(w2,3);
            wFinal(barGammaIndex,delay,:,L+1) = w3(:,end);

            e3(barGammaIndex,delay,:,L+1) = mean(e2,2);

        end
       

    end
    
end

save(['.' filesep 'resultsMSE' filesep 'results49.mat'],'wFinal','e3','meanCount');




